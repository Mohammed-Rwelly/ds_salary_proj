# -*- coding: utf-8 -*-
"""data cleaning .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JqGSRk3cpJ4S-ISoS6QSIUQPaOm15bxc
"""

import pandas as pd
import numpy as np
import seaborn as sns

data=pd.read_csv('glassdoor_job.csv')
data.head(30)

data.shape

"""I see that there are some values where there is a negative one for salary .i don't think that those will be particulary useful to us ,so let's just remove all those. """

data =data[data['Salary Estimate'] != '-1']

salary = data['Salary Estimate'].apply(lambda x:x.split('(')[0])
salary

"""as we can see above there are the dollar sign and thousand marker ,So we are removing """

minus_kd=salary.apply(lambda x:x.replace('$','').replace('K',''))
minus_kd.head(40)

"""as we can see above there is a salary in per hour ,so our next step let's make a column for per our """

data['hourly']=salary.apply(lambda x:1 if 'per hour' in x.lower() else 0 )

"""as we can see a bove there is a salary in employer provided salary ,so our next step let's make a column for employer provided salary """

data['employer_provided']=salary.apply(lambda x: 1 if 'employer provided salary' in x.lower() else 0)

"""if we do that we should now have no more employer provided or per pur salaries """

min_hr=minus_kd.apply(lambda x:x.lower().replace('per hour','').replace('employer provided salary',''))

"""Our next step let's make a column for a min for salary in each post if we look at min_hr we can see that they're separated by '-',so we are going to split on the '-' and just take the first thing """

data['min_salary']=min_hr.apply(lambda x:x.split('-')[0])
data.head()

"""Our next step let's make a column for a max for salary in each post if we look at min_hr we can see that they're separated by '-',so we are going to split on the '-' and just take the second thing"""

data['max_salary']=min_hr.apply(lambda x:x.split('-')[1])
data.head()

"""befor we calculate the average for salary ,but firstly must check the data type of min salary and max salary is int ?"""

print('the data type of min salary column  :', data.min_salary.dtype)
print('the data type of max salary column  :', data.max_salary.dtype)

"""as we can see above the data type of min salary and max salary columns are Object which there are some values are string so we can drop it"""

def is_int(df):
  try:
    int(df)
  except:
    return False
  return True

data[~data['min_salary'].apply(is_int)]['min_salary']

"""as we can see above min salary start with : and this is wrong so we are replacing : with space ,if we do that we should now have no more min salary with ':'"""

data['min_salary']=data['min_salary'].apply(lambda x:x.replace(':',''))
data[~data['min_salary'].apply(is_int)]['min_salary']

"""We apply the same operations on max salary column """

data['max_salary']=data['max_salary'].apply(lambda x:x.replace(':',''))
data[~data['max_salary'].apply(is_int)]['max_salary']

data['min_salary']=data['min_salary'].astype(int)
data['max_salary']=data['max_salary'].astype(int)
data['avg_salary']=(data['max_salary']+data['min_salary'])/2
data.head()

"""Now we are getting a name of company text only without numbers """

data['company_text']=data.apply(lambda x:x['Company Name'] if x['Rating'] <0 else x['Company Name'][:-3] ,axis=1)

"""What is the state of job ?
so we will just take location and we're gonna do a split and take the second the second part 
"""

data['job_state']=data['Location'].apply(lambda x:x.split(',')[1])
data['job_state']

"""if we want to see how many are job in each state ?"""

data['job_state'].value_counts()

"""What is the age of company ?"""

data['age_company']=data.Founded.apply(lambda x:x if x <0 else 2022-x)
data['age_company']

"""We'll dispaly how many of these job descriptions have a Python """

data['Python']=data['Job Description'].apply(lambda x:1 if 'python' in x.lower() else 0)
data.Python.value_counts()

"""We'll dispaly how many of these job descriptions have a R-studio?"""

data['rstudio']=data['Job Description'].apply(lambda x:1 if 'r-studio' in x.lower() else 0)
data.rstudio.value_counts()

"""We'll dispaly how many of these job descriptions have a Spark?"""

data['Spark']=data['Job Description'].apply(lambda x:1 if 'spark' in x.lower() else 0)
data.Spark.value_counts()

"""We'll dispaly how many of these job descriptions have a Aws?"""

data['Aws']=data['Job Description'].apply(lambda x:1 if 'aws' in x.lower() else 0)
data.Aws.value_counts()

"""We'll dispaly how many of these job descriptions have an Excel?"""

data['Excel']=data['Job Description'].apply(lambda x:1 if 'excel' in x.lower() else 0)
data.Excel.value_counts()

"""I'm just gonna get the name of this first column """

data.columns[0]

"""I would drop the first column because we don't want this unnamed column"""

data_out=data.drop(['Unnamed: 0'],axis=1)

data_out.columns

"""We're gonna just make the CSV file after data cleaning """

data.to_csv('salary_data_cleaned.csv',index=False)

